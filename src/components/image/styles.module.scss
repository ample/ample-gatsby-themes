@mixin circle($size) {
  border-radius: 50%;
  height: $size;
  width: $size;
}

@mixin media($initial-width: false, $final-width: false) {
  @if type-of($initial-width) != number {
    @error '`#{$initial-width}` is not a valid value for $initial-width. `#{$examples}`';
  }
  @else if type-of($final-width) != number and $final-width != false and $final-width != down {
    @error '`#{$final-width}` is not a valid value for $final-width. `#{$examples}`';
  }
  @else if $initial-width and $final-width == false {
    @media only screen and (min-width: $initial-width) {
      @content;
    }
  }
  @else if $initial-width and $final-width == down {
    @media only screen and (max-width: $initial-width - 1) {
      @content;
    }
  }
  @else if $initial-width and type-of($final-width) == number {
    @media only screen and (min-width: $initial-width) and (max-width: $final-width - 1) {
      @content;
    }
  }
}

.image {
  width: 100%;

  &.has_background {
    display: inline-block;
    position: relative;
    z-index: 3;

    &::after,
    &::before {
      content: '';
      display: inline-block;
      position: absolute;
      z-index: -1;
    }

    &::before {
      @include circle(155px);

      background-color: #b5be00;
      left: -20px;
      opacity: 0.1;
      top: -30px;

      @include media(960px) {
        $position: -40px;

        @include circle(333px);

        left: $position;
        top: $position;
      }
    }

    &::after {
      $position: -20px;

      @include circle(119px);

      background-color: #f8f9f9;
      bottom: $position;
      right: $position;

      @include media(960px) {
        $position: -60px;

        @include circle(256px);

        bottom: $position;
        right: $position / 2;
      }
    }
  }

  > img {
    max-width: 100%;
  }
}
